// Author: Samuel Champer

species all initialize() {
    // This model is panmictic; these parameters are only used to match the capacity to the spatial models.
    defineCfgParam("SIMULATION_AREA", 100);  // E.g., in hectares or sq km.
    defineCfgParam("FORAGING_AREA", 1);  // E.g., in hectares or sq km.
    defineCfgParam("INDIVIDUALS_PER_FORAGING_AREA", 100);
    defineCfgParam("LITTER_SIZE", 8);

    initializeSLiMModelType("nonWF");
}

//// HELPER FUNCTION FOR CONSTANTS THAT MAY ALSO BE CONFIGURED VIA THE COMMAND LINE
function (void)defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

species animal initialize() {
    initializeSpecies(avatar="O", color="red");
    initializeSex("A");
}

//// REPRODUCTION RULES
species animal reproduction(NULL, "F") {
    litter_size = rpois(1, LITTER_SIZE);
    if (litter_size == 0)
        return;
    mate = subpop.sampleIndividuals(1, sex="M");
    for (i in seqLen(litter_size))
        subpop.addCrossed(individual, mate);
}

ticks all 1 early() {
    // Introduce the initial population.
    defineConstant("CAPACITY", asInteger(round(SIMULATION_AREA / FORAGING_AREA * INDIVIDUALS_PER_FORAGING_AREA)));
    animal.addSubpop("p1", CAPACITY);
    defineGlobal("INDS_PRE_MORTALITY", size(p1.individuals));
}

//// FITNESS & FORAGING
ticks all 2: early() {
    defineGlobal("INDS_PRE_MORTALITY", p1.individualCount);
    p1.individuals.fitnessScaling = CAPACITY / p1.individualCount;
}

ticks all 2 late() {
    defineGlobal("TIMER_START", clock(type="mono"));
}

//// OUTPUT
ticks all 3:22 late () {
    catn("Tick: " + community.tick);
    catn("POP_PRE_MORTALITY: " + INDS_PRE_MORTALITY);
    catn("POP: " + size(p1.individuals));
    catn("TICK_RUNTIME: " + (clock(type="mono") - TIMER_START));
    catn("Males: " + size(p1.subsetIndividuals(sex="M")) +
        "  Females: " +  size(p1.subsetIndividuals(sex="F")));
    catn("Newborns: " + size(p1.subsetIndividuals(minAge=0, maxAge=0)) +
        " ; 1: " + size(p1.subsetIndividuals(minAge=1, maxAge=1)) +
        " ; 2: " + size(p1.subsetIndividuals(minAge=2, maxAge=2)) +
        " ; 3: " + size(p1.subsetIndividuals(minAge=3, maxAge=3)) +
        " ; Avg age: " + sum(p1.individuals.age)/size(p1.individuals) + "\n");
    defineGlobal("TIMER_START", clock(type="mono"));
}
