// Author: Samuel Champer

species all initialize() {
    defineCfgParam("SIMULATION_AREA", 100);  // E.g., in hectares or sq km.
    defineCfgParam("INDIVIDUALS_PER_UNIT_AREA", 100);
    defineCfgParam("LITTER_SIZE", 8);

    defineConstant("FORAGING_RADIUS", sqrt(1/PI));
    defineConstant("MIGRATION_DISTANCE", 2 * FORAGING_RADIUS);
    defineConstant("RESOURCES_PER_NODE", INDIVIDUALS_PER_UNIT_AREA / 37);

    initializeSLiMModelType("nonWF");

    // Foraging
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=2 * FORAGING_RADIUS);

    // Reproduction
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=1.5 * FORAGING_RADIUS, sexSegregation="FM");
}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

species resource_node initialize() {
    initializeSpecies(avatar="V", color="cornflowerblue");
    initializeSLiMOptions(dimensionality="xy");
}

species animal initialize() {
    initializeSpecies(avatar="O", color="red");
    initializeSLiMOptions(dimensionality="xy");
    initializeSex("A");
}

ticks all 2: first() {
    i2.evaluate(p2);
}

//// REPRODUCTION RULES.
species animal reproduction (NULL, "F") {
    neighbors = i2.nearestInteractingNeighbors(individual, p2.individualCount, p2);
    // If no mates are in mate detection range, cannot mate.
    if (size(neighbors) == 0)
        return;
    mate = sample(neighbors, 1);
    for (i in seqLen(rpois(1, LITTER_SIZE))) {
        offspring = subpop.addCrossed(individual, mate);
        do
            pos = individual.spatialPosition + rnorm(2, 0, MIGRATION_DISTANCE);
        while (!p1.pointInBounds(pos));
        offspring.setSpatialPosition(pos);
    }
}

ticks all 1 early() {
    // Tile the model area with resource nodes in a regular hexagonal tiling.
    // First some initial geometry.
    hex_side_length = sqrt(4 * (1 / 37 / 6) / sqrt(3));
    hex_height = hex_side_length * sqrt(3);
    hexes_wide = 1 + asInteger(sqrt(SIMULATION_AREA) / (1.5 * hex_side_length));
    even_hexes_wide = asInteger(hexes_wide / 2);
    odd_hexes_wide = asInteger(hexes_wide / 2);
    if (hexes_wide % 2 != 0)
        even_hexes_wide = even_hexes_wide + 1;
    hexes_high = asInteger(2 * sqrt(SIMULATION_AREA) / hex_height) + 1;
    if (hexes_high % 2 == 0)
        num_resource_nodes = hexes_high / 2 * even_hexes_wide + hexes_high / 2 * odd_hexes_wide;
    else
        num_resource_nodes = (asInteger(hexes_high / 2) + 1) * even_hexes_wide + asInteger(hexes_high / 2) * odd_hexes_wide;
    xmax = (hexes_wide - 1) * 1.5 * hex_side_length;
    ymax = (hexes_high - 1) * hex_height / 2;
    capacity = asInteger(xmax * ymax / 1 * INDIVIDUALS_PER_UNIT_AREA);

    // Next initialize the resource node population and place them at the centerpoints of the hexagonal grid.
    resource_node.addSubpop("p1", asInteger(num_resource_nodes));
    p1.setSpatialBounds(c(0, 0, xmax, ymax));
    x = -1;
    y = -1;
    for (node in p1.individuals) {
        x = x + 1;
        if (y % 2 == 0)
            x = x % even_hexes_wide;
        if (y % 2 != 0)
            x = x % odd_hexes_wide;
        if (x == 0)
            y = y + 1;
        x_coord = x * 3 * hex_side_length;
        total_x_index = 2 * x;
        if (y % 2 != 0) {
            x_coord = x_coord + 1.5 * hex_side_length;
            total_x_index = total_x_index + 1;
        }
        y_coord = y * hex_height / 2;
        node.setSpatialPosition(c(x_coord, y_coord));
        node.setValue("resources_here", RESOURCES_PER_NODE);

        // Resources on the edge of the modeled area have their area cut in half.
        // Thus, they should also only have half as many resource nodes.
        if (total_x_index == 0 | total_x_index == hexes_wide - 1)
            node.setValue("resources_here", node.getValue("resources_here") / 2);
        if (y == 0 | y == hexes_high - 1)
            node.setValue("resources_here", node.getValue("resources_here") / 2);
        node.tagF = node.getValue("resources_here");
        node.tag = 0;
    }

    // Initialize the population.
    animal.addSubpop("p2", capacity);
    p2.setSpatialBounds(c(0, 0, xmax, ymax));
    p2.individuals.setSpatialPosition(p2.pointUniform(p2.individualCount));
    defineGlobal("INDS_PRE_MORTALITY", p2.individualCount);
}

//// FITNESS & FORAGING
ticks all 2: early() {
    defineGlobal("INDS_PRE_MORTALITY", p2.individualCount);
    i1.evaluate(c(p2, p1));
    for (ind in p2.individuals) {
        food_sources = i1.nearestNeighbors(ind, 37, p1);
        ind.setValue("nearest_nodes", food_sources.index);
        // Demand on the resource nodes is noted in the 'tag' property.
        food_sources.tag = food_sources.tag + 1;
    }

    // The resource nodes are then distributed according to how much was available per customer.
    for (ind in p2.individuals) {
        food_sources = p1.individuals[ind.getValue("nearest_nodes")];
        food_eaten = sum(food_sources.tagF / food_sources.tag);
        ind.fitnessScaling = max(c(min(c(1, food_eaten)), 0));
    }

    // After mortality is calculated, reset the supply and demand on the resource nodes for the next generation.
    for (node in p1.individuals) {
        node.tagF = node.getValue("resources_here");
        node.tag = 0;
    }
}

ticks all 2 late() {
    defineGlobal("TIMER_START", clock());
}

//// OUTPUT
ticks all 3:12 late () {
    catn("Time: " + community.tick);
    catn("POP_PRE_MORTALITY: " + INDS_PRE_MORTALITY);
    catn("POP: " + p2.individualCount);
    catn("TICK_RUNTIME: " + (clock() - TIMER_START));
    catn("Males: " + size(p2.subsetIndividuals(sex="M")) +
        "  Females: " +  size(p2.subsetIndividuals(sex="F")));
    catn("Newborns: " + size(p2.subsetIndividuals(minAge=0, maxAge=0)) +
        " ; 1: " + size(p2.subsetIndividuals(minAge=1, maxAge=1)) +
        " ; 2: " + size(p2.subsetIndividuals(minAge=2, maxAge=2)) +
        " ; 3: " + size(p2.subsetIndividuals(minAge=3, maxAge=3)) +
        " ; Avg age: " + sum(p2.individuals.age)/p2.individualCount + "\n");
    defineGlobal("TIMER_START", clock());
}
