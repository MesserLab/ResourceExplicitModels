// Author: Samuel Champer

species all initialize() {
    defineCfgParam("SIMULATION_AREA", 100);  // E.g., in hectares or sq km.
    defineCfgParam("FORAGING_AREA", 1);  // E.g., in hectares or sq km.
    defineCfgParam("INDIVIDUALS_PER_FORAGING_AREA", 100);
    defineCfgParam("LITTER_SIZE", 8);

    defineConstant("FORAGING_RADIUS", sqrt(FORAGING_AREA/PI));
    defineConstant("MIGRATION_DISTANCE", 2 * FORAGING_RADIUS);
    defineConstant("NODES_PER_FORAGING_AREA", 37);  // Tiling density.

    initializeSLiMModelType("nonWF");

    // Foraging
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=FORAGING_RADIUS);

    // Reproduction part 1
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=FORAGING_RADIUS, sexSegregation="FM");
    // Reproduction part 2
    initializeInteractionType(3, "xy", reciprocal=T, maxDistance=FORAGING_RADIUS, sexSegregation="MM");
}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

species resource_node initialize() {
    initializeSpecies(avatar="V", color="cornflowerblue");
    initializeSLiMOptions(dimensionality="xy");
    initializeSex("A");
}

species animal initialize() {
    initializeSpecies(avatar="O", color="red");
    initializeSLiMOptions(dimensionality="xy");
    initializeSex("A");
}

ticks all 2: first() {
    // Evaluate the two part spatial interaction for reproduction.
    i2.evaluate(c(p1, p2));
    i3.evaluate(c(p1, p2));
}

//// REPRODUCTION RULES.
species animal reproduction (NULL, "F") {
    // Females will draw from a pool of the males within a radius around their nearest resource node.
    for (node in p1.individuals) {
        nearby_males = i3.nearestInteractingNeighbors(node, p2.individualCount, p2);
        node.setValue("nearby_males", nearby_males.index);
    }

    females = p2.subsetIndividuals(sex="F");
    litter_sizes = rpois(females.size(), LITTER_SIZE);
    non_zero = (litter_sizes != 0);
    females = females[non_zero];
    litter_sizes = litter_sizes[non_zero];
    for (idx in seqAlong(females)) {
        mother = females[idx];
        // Females not near any resource nodes cannot reproduce.
        nearest_resources = i2.nearestInteractingNeighbors(mother, p1.individualCount, p1);
        if (!size(nearest_resources))
            next;
        nearby_males = c(nearest_resources.getValue("nearby_males"));
        // Females with no available mates cannot reproduce.
        if (size(nearby_males) == 0)
            next;
        // Sample a mate and generate offspring.
        mate = p2.individuals[sample(nearby_males, 1)];
        for (i in seqLen(litter_sizes[idx])) {
            offspring = subpop.addCrossed(mother, mate);
            do
                pos = mother.spatialPosition + rnorm(2, 0, MIGRATION_DISTANCE);
            while (!p2.pointInBounds(pos));
            offspring.setSpatialPosition(pos);
        }
    }
    self.active = 0;
}

function (object) hexGridNodes(void) {
    /*
        Set up the node positions and resource values for the resource-explicit interaction.
        Most of the complexity of this function is related to centering the nodes within the
        modeled area. E.g., if an area is 100.5 wide and nodes are 1 wide, the grid of nodes
        will be 101 nodes wide and be centered in the area.
        The amount of resources in nodes that are partially outside the area is
        reduced according to how much area is missing from those nodes.
    */

    // Vectors to store the x coordinates, y coordinates, and resource amounts at each resource node.
    xs = c();
    ys = c();
    resources = c();

    // Some calculations to determine node size and inset from the edges of the modled area.
    sim_edge_length = sqrt(SIMULATION_AREA);
    resources_per_node = INDIVIDUALS_PER_FORAGING_AREA / NODES_PER_FORAGING_AREA;
    hex_side_length = sqrt(4 * (FORAGING_AREA / NODES_PER_FORAGING_AREA / 6) / sqrt(3));
    hex_height = hex_side_length * sqrt(3);
    hexes_wide = asInteger(1 + (sim_edge_length - hex_side_length) / (1.5 * hex_side_length));
    odd_hexes_wide = asInteger(hexes_wide / 2);
    even_hexes_wide = hexes_wide - odd_hexes_wide;
    hexes_high = asInteger(2 * sim_edge_length / hex_height) + 1;
    total_covered_width = (0.5 + 1.5 * hexes_wide) * hex_side_length;
    total_covered_height = hexes_high * hex_height / 2;
    horizontal_offset = hex_side_length + (total_covered_width - sim_edge_length) / 2;
    vertical_offset = (total_covered_height - sim_edge_length) / 2;

    // Adjust the resources of nodes with areas cut off by the edge of the modeled area.
    side_edge_area = 1 / 6;  // Start with the triangle on the side of the hexagon.
    if (horizontal_offset + hex_side_length / 2 < hex_side_length)
        side_edge_area = 1 / 6 + (hex_side_length + 2 * horizontal_offset) / (3 * hex_side_length);  // Add the rectangular area.
    else
        // Add the partial triangle on the other side.
        side_edge_area = 5 / 6 - (hex_side_length - 2 * horizontal_offset) * (3 * hex_side_length - 2 * horizontal_offset) / (6 * hex_side_length * hex_side_length);
    vertical_edge_area = (hex_height - 2 * vertical_offset) * (9 * hex_side_length - 2 * sqrt(3) * vertical_offset) / (18 * hex_height * hex_side_length);
    second_vertical_edge_area = 1 - 2 * vertical_offset * (hex_height + vertical_offset) / (9 * hex_side_length * hex_side_length);
    partial_side_node_resources = resources_per_node * side_edge_area;

    // Repeating sequences to be used for xs and resource values.
    even_xrow = seqLen(even_hexes_wide) * hex_side_length * 3 + horizontal_offset;
    odd_xrow = seqLen(odd_hexes_wide) * hex_side_length * 3 + horizontal_offset + 1.5 * hex_side_length;
    if (odd_hexes_wide == even_hexes_wide) {
        even_resource_row = c(partial_side_node_resources, rep(resources_per_node, even_hexes_wide - 1));
        odd_resource_row = c(rep(resources_per_node, odd_hexes_wide - 1), partial_side_node_resources);
    }
    else {
        even_resource_row = c(partial_side_node_resources, rep(resources_per_node, even_hexes_wide - 2), partial_side_node_resources);
        odd_resource_row = rep(resources_per_node, odd_hexes_wide);
    }

    // Assemble the xs, ys, and resource amounts.
    for (y_index in seq(0, hexes_high - 1)) {
        y = vertical_offset + y_index * hex_height / 2;
        if (y_index % 2 == 0) {
            xs = c(xs, even_xrow);
            ys = c(ys, rep(y, even_hexes_wide));
            if (y_index == 0 | y_index == hexes_high - 1)
                resources = c(resources, even_resource_row * vertical_edge_area);
            else if (y_index == hexes_high - 2)
                resources = c(resources, even_resource_row * second_vertical_edge_area);
            else
                resources = c(resources, even_resource_row);
        }
        else {
            xs = c(xs, odd_xrow);
            ys = c(ys, rep(y, odd_hexes_wide));
            if (y_index == hexes_high - 1)
                resources = c(resources, odd_resource_row * vertical_edge_area);
            else if (y_index == 1 | y_index == hexes_high - 2)
                resources = c(resources, odd_resource_row * second_vertical_edge_area);
            else
                resources = c(resources, odd_resource_row);
        }
    }
    return Dictionary("xs", xs, "ys", ys, "resources", resources);
}

ticks all 1 early() {
    // Get the coordinates and resource amounts for the resource nodes.
    nodeData = hexGridNodes();
    // Add the node population.
    resource_node.addSubpop("p1", size(nodeData.getValue("resources")), sexRatio=1.0);
    p1.setSpatialBounds(c(0, 0, sqrt(SIMULATION_AREA), sqrt(SIMULATION_AREA)));
    p1.individuals.x = nodeData.getValue("xs");
    p1.individuals.y = nodeData.getValue("ys");
    p1.individuals.tagF = nodeData.getValue("resources");

    // Initialize the population.
    capacity = asInteger(SIMULATION_AREA / FORAGING_AREA * INDIVIDUALS_PER_FORAGING_AREA);
    animal.addSubpop("p2", capacity);
    p2.setSpatialBounds(c(0, 0, sqrt(SIMULATION_AREA), sqrt(SIMULATION_AREA)));
    p2.individuals.setSpatialPosition(p2.pointUniform(p2.individualCount));
    defineGlobal("INDS_PRE_MORTALITY", p2.individualCount);
}

//// FITNESS & FORAGING
ticks all 2: early() {
    defineGlobal("INDS_PRE_MORTALITY", p2.individualCount);
    i1.evaluate(c(p2, p1));

    // Each node evenly divides resources to all individuals within range.
    p2.individuals.fitnessScaling = 0.0;
    for (node in p1.individuals) {
        customers = i1.nearestNeighbors(node, p2.individualCount, p2);
        customers.fitnessScaling = customers.fitnessScaling + node.tagF / size(customers);
    }
    p2.individuals.fitnessScaling = pmin(p2.individuals.fitnessScaling, 1.0);
}

ticks all 2 late() {
    defineGlobal("TIMER_START", clock(type="mono"));
}

//// OUTPUT
ticks all 3:22 late () {
    catn("Time: " + community.tick);
    catn("POP_PRE_MORTALITY: " + INDS_PRE_MORTALITY);
    catn("POP: " + p2.individualCount);
    catn("TICK_RUNTIME: " + (clock(type="mono") - TIMER_START));
    catn("Males: " + size(p2.subsetIndividuals(sex="M")) +
        "  Females: " +  size(p2.subsetIndividuals(sex="F")));
    catn("Newborns: " + size(p2.subsetIndividuals(minAge=0, maxAge=0)) +
        " ; 1: " + size(p2.subsetIndividuals(minAge=1, maxAge=1)) +
        " ; 2: " + size(p2.subsetIndividuals(minAge=2, maxAge=2)) +
        " ; 3: " + size(p2.subsetIndividuals(minAge=3, maxAge=3)) +
        " ; Avg age: " + sum(p2.individuals.age)/p2.individualCount + "\n");
    defineGlobal("TIMER_START", clock(type="mono"));
}
