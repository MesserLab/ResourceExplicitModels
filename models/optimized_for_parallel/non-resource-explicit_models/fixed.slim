// Author: Samuel Champer

species all initialize() {
    defineCfgParam("SIMULATION_AREA", 100);  // E.g., in hectares or sq km.
    defineCfgParam("FORAGING_AREA", 1);  // E.g., in hectares or sq km.
    defineCfgParam("INDIVIDUALS_PER_FORAGING_AREA", 100);
    defineCfgParam("LITTER_SIZE", 8);

    defineConstant("FORAGING_RADIUS", sqrt(FORAGING_AREA/PI));
    defineConstant("MIGRATION_DISTANCE", 2 * FORAGING_RADIUS);

    initializeSLiMModelType("nonWF");

    // Foraging
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=2 * FORAGING_RADIUS);

    // Reproduction
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=MIGRATION_DISTANCE, sexSegregation="FM");
}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

species animal initialize() {
    initializeSpecies(avatar="O", color="red");
    initializeSLiMOptions(dimensionality="xy");
    initializeSex("A");
}

ticks all 2: first() {
    // Evaluate the spatial interaction for reproduction.
    i2.evaluate(p1);
}

//// REPRODUCTION RULES.
species animal reproduction (NULL) {
    females = p1.subsetIndividuals(sex="F");
    // Draw litter sizes in bulk and eliminate all females that have a
    // litter size of zero; no need to even draw mates for them
    litter_sizes = rpois(females.size(), LITTER_SIZE);
    non_zero = (litter_sizes != 0);
    females = females[non_zero];
    litter_sizes = litter_sizes[non_zero];

    // Draw mates for the females that remain
    mates = i2.drawByStrength(females, 1, p1, returnDict=T);
    mated_indices = mates.compactIndices(preserveOrder=F);
    females = females[mated_indices];
    litter_sizes = litter_sizes[mated_indices];
    for (idx in seqAlong(females)) {
        mate = mates.getValue(idx);
        mother = females[idx];
        offspring = subpop.addCrossed(mother, mate, count=litter_sizes[idx]);
        offspring.setSpatialPosition(mother.spatialPosition);
    }
    self.active = 0;
}

ticks all 1 early() {
    // Introduce the initial population.
    capacity = asInteger(round(SIMULATION_AREA / FORAGING_AREA * INDIVIDUALS_PER_FORAGING_AREA));
    animal.addSubpop("p1", capacity);
    p1.setSpatialBounds(c(0, 0, sqrt(SIMULATION_AREA), sqrt(SIMULATION_AREA)));
    p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
    defineGlobal("INDS_PRE_MORTALITY", p1.individualCount);
}

//// FITNESS & FORAGING
ticks all 2: early() {
    defineGlobal("INDS_PRE_MORTALITY", p1.individualCount);

    // Deviate new offspring from their maternal positions
    unmoved_newborns = p1.subsetIndividuals(maxAge=0);
    maternal_positions = unmoved_newborns.spatialPosition;

    while (size(unmoved_newborns)) {
        deviated_positions = maternal_positions + rnorm(size(unmoved_newborns) * 2, 0, MIGRATION_DISTANCE);
        unmoved_newborns.setSpatialPosition(deviated_positions);

        // Set up next iteration
        out_of_bounds = !p1.pointInBounds(deviated_positions);
        unmoved_newborns = unmoved_newborns[out_of_bounds];
        maternal_positions = maternal_positions[repEach(out_of_bounds, 2)];
    }
    i1.evaluate(p1);
    competition = i1.localPopulationDensity(p1.individuals);
    competition_ratio = competition * FORAGING_AREA / INDIVIDUALS_PER_FORAGING_AREA;
    p1.individuals.fitnessScaling = 1 / competition_ratio;
}

ticks all 2 late() {
    defineGlobal("TIMER_START", clock(type="mono"));
}

//// OUTPUT
ticks all 3:22 late () {
    catn("Tick: " + community.tick);
    catn("POP_PRE_MORTALITY: " + INDS_PRE_MORTALITY);
    catn("POP: " + p1.individualCount);
    catn("TICK_RUNTIME: " + (clock(type="mono") - TIMER_START));
    catn("Males: " + size(p1.subsetIndividuals(sex="M")) +
        "  Females: " +  size(p1.subsetIndividuals(sex="F")));
    catn("Newborns: " + size(p1.subsetIndividuals(minAge=0, maxAge=0)) +
        " ; 1: " + size(p1.subsetIndividuals(minAge=1, maxAge=1)) +
        " ; 2: " + size(p1.subsetIndividuals(minAge=2, maxAge=2)) +
        " ; 3: " + size(p1.subsetIndividuals(minAge=3, maxAge=3)) +
        " ; Avg age: " + sum(p1.individuals.age)/size(p1.individuals) + "\n");
    defineGlobal("TIMER_START", clock(type="mono"));
}
