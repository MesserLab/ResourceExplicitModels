// Author: Samuel Champer

species all initialize() {
    defineCfgParam("SIMULATION_AREA", 100);  // E.g., in hectares or sq km.
    defineCfgParam("FORAGING_AREA", 1);  // E.g., in hectares or sq km.
    defineCfgParam("INDIVIDUALS_PER_FORAGING_AREA", 100);
    defineCfgParam("LITTER_SIZE", 8);

    defineConstant("FORAGING_RADIUS", sqrt(FORAGING_AREA/PI));
    defineConstant("MIGRATION_DISTANCE", 2 * FORAGING_RADIUS);

    initializeSLiMModelType("nonWF");

    // Foraging
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=2 * FORAGING_RADIUS);
    i1.setInteractionFunction("l", 1.0);

    // Reproduction
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=MIGRATION_DISTANCE, sexSegregation="FM");
}

//// HELPER FUNC FOR CONSTANTS THAT MAY ASLO BE CONFIGURED VIA COMMAND LINE.
function (void) defineCfgParam(string$ name, lifs value) {
    if (!exists(name))
        defineConstant(name, value);
}

species animal initialize() {
    initializeSpecies(avatar="O", color="red");
    initializeSLiMOptions(dimensionality="xy");
    initializeSex("A");
}

ticks all 2: first() {
    // Evaluate the spatial interaction for reproduction.
    i2.evaluate(p1);
}

//// REPRODUCTION RULES.
species animal reproduction (NULL, "F") {
    litter_size = rpois(1, LITTER_SIZE);
    if (litter_size == 0)
        return;
    // Draw a random mate from among males in range.
    mate = i2.drawByStrength(individual, 1, p1);
    // If no mates are in range, cannot mate.
    if (size(mate) == 0)
        return;
    for (i in seqLen(litter_size)) {
        offspring = subpop.addCrossed(individual, mate);
        do
            pos = individual.spatialPosition + rnorm(2, 0, MIGRATION_DISTANCE);
        while (!p1.pointInBounds(pos));
        offspring.setSpatialPosition(pos);
    }
}

ticks all 1 early() {
    // Introduce the initial population.
    capacity = asInteger(round(SIMULATION_AREA / FORAGING_AREA * INDIVIDUALS_PER_FORAGING_AREA));
    animal.addSubpop("p1", capacity);
    p1.setSpatialBounds(c(0, 0, sqrt(SIMULATION_AREA), sqrt(SIMULATION_AREA)));
    p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));
    defineGlobal("INDS_PRE_MORTALITY", p1.individualCount);
}

//// FITNESS & FORAGING
ticks all 2: early() {
    defineGlobal("INDS_PRE_MORTALITY", p1.individualCount);
    i1.evaluate(p1);
    competition = i1.localPopulationDensity(p1.individuals);
    competition_ratio = competition * FORAGING_AREA / INDIVIDUALS_PER_FORAGING_AREA;
    p1.individuals.fitnessScaling = 1 / competition_ratio;
}

ticks all 2 late() {
    defineGlobal("TIMER_START", clock(type="mono"));
}

//// OUTPUT
ticks all 3:22 late () {
    catn("Tick: " + community.tick);
    catn("POP_PRE_MORTALITY: " + INDS_PRE_MORTALITY);
    catn("POP: " + p1.individualCount);
    catn("TICK_RUNTIME: " + (clock(type="mono") - TIMER_START));
    catn("Males: " + size(p1.subsetIndividuals(sex="M")) +
        "  Females: " +  size(p1.subsetIndividuals(sex="F")));
    catn("Newborns: " + size(p1.subsetIndividuals(minAge=0, maxAge=0)) +
        " ; 1: " + size(p1.subsetIndividuals(minAge=1, maxAge=1)) +
        " ; 2: " + size(p1.subsetIndividuals(minAge=2, maxAge=2)) +
        " ; 3: " + size(p1.subsetIndividuals(minAge=3, maxAge=3)) +
        " ; Avg age: " + sum(p1.individuals.age)/size(p1.individuals) + "\n");
    defineGlobal("TIMER_START", clock(type="mono"));
}
